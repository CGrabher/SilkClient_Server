@using System.ComponentModel.DataAnnotations;
@using SilkClient.api;
@using System.Security.Cryptography;
@using System.Text;

@rendermode InteractiveServer
@page "/"
@page "/login"

<style>
    /* Existing styles remain unchanged */

    .form-group {
        margin-bottom: 15px;
    }

    label {
        display: block;
        text-align: center; /* Center the text within the label */
        margin-bottom: 5px; /* Add some space between label and input */
    }

    #username,
    #password {
        width: 60%; /* Make the input fields take up the full width */
        padding: 10px; /* Add padding for better visual appearance */
        box-sizing: border-box; /* Include padding and border in the element's total width and height */
        display: block;
        margin: 0 auto;
    }

/*     p[role="status"] {
        color: #E84545;
        font-style: italic;
        text-align: center;
    } */

    .btn-primary {
        background-color: #903749;
        color: #2B2E4A;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        margin: 0 auto;
        display: block;
    }

    h1 {
        color: #E84545;
        text-align: center;
        margin-bottom: 15px; /* Add some space below the header */
 
    }
</style>



<div class="container">
    <div>
        <h1>Login</h1>

        <div Model="@loginModel">
            <div class="form-group">
                <label for="username">Username:</label>
                <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
            </div>

            <div class="form-group">
                <label for="password">Password:</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
            </div>
        </div>

        <p role="status">@loginModel.Message</p>
        <button class="btn btn-primary" @onclick="LoginUser">Login</button>
    </div>
</div>

@*to redirect after the login*@
@inject NavigationManager NavManager
@*to store the login state*@
@inject LoginSession Session
@*to hash the password*@
@inject LoginService LoginService
@*to obtain a generated client to the API*@
@inject ApiClientFactory ClientFactory

@code {

    private LoginModel loginModel = new LoginModel();
    /// <summary>
    /// Logs in the current User with the given Username & Password
    /// 1.
    /// </summary>
    private async void LoginUser()
    {
        var client = ClientFactory.CreateClient();

        var auth = new LoginParameters()
            {
                Username = loginModel.Username,
                PasswordHash = await LoginService.HashPassword(loginModel.Username, loginModel.Password)
            };

        //perform login call
        var loginResult = await client.LoginAsync(auth);
        
        if (loginResult.Success)
        {
            // login successful
            // remember user data in session object
            Session.User = loginModel.Username;
            Session.LoggedIn = true;
            Session.BearerToken = loginResult.Token;
            //redirect user to assets page
            NavManager.NavigateTo("/assets");
        }
        else
        {
            loginModel.Password = "";
            loginModel.Message = loginResult.Message;
            Session.User = "";
            Session.LoggedIn = false;
            Session.BearerToken = "";
        }

        //notify others that login-state has changed
        Session.NotifyLogin();
      
        StateHasChanged();
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required.")]
        public string Username { get; set; } = "";

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; } = "";

        public string Message { get; set; } = "";
    }
}